// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.opaque_types.OuterOpaqueType in opaque_types.proto
@file:Suppress(
  "DEPRECATION",
  "RUNTIME_ANNOTATION_NOT_SUPPORTED",
)

package squareup.protos.opaque_types

import com.squareup.wire.FieldEncoding
import com.squareup.wire.Message
import com.squareup.wire.ProtoAdapter
import com.squareup.wire.ProtoReader
import com.squareup.wire.ProtoWriter
import com.squareup.wire.ReverseProtoWriter
import com.squareup.wire.Syntax.PROTO_2
import com.squareup.wire.WireField
import com.squareup.wire.`internal`.JvmField
import com.squareup.wire.`internal`.sanitize
import kotlin.Any
import kotlin.AssertionError
import kotlin.Boolean
import kotlin.Deprecated
import kotlin.DeprecationLevel
import kotlin.Int
import kotlin.Long
import kotlin.Nothing
import kotlin.String
import kotlin.Suppress
import okio.ByteString

public class OuterOpaqueType(
  @field:WireField(
    tag = 1,
    adapter = "com.squareup.wire.ProtoAdapter#BYTES",
    schemaIndex = 0,
  )
  public val inner_opaque_type_1: ByteString? = null,
  @field:WireField(
    tag = 2,
    adapter = "squareup.protos.opaque_types.OuterOpaqueType${'$'}InnerOpaqueType2#ADAPTER",
    schemaIndex = 1,
  )
  public val inner_opaque_type_2: InnerOpaqueType2? = null,
  unknownFields: ByteString = ByteString.EMPTY,
) : Message<OuterOpaqueType, Nothing>(ADAPTER, unknownFields) {
  @Deprecated(
    message = "Shouldn't be used in Kotlin",
    level = DeprecationLevel.HIDDEN,
  )
  override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

  override fun equals(other: Any?): Boolean {
    if (other === this) return true
    if (other !is OuterOpaqueType) return false
    if (unknownFields != other.unknownFields) return false
    if (inner_opaque_type_1 != other.inner_opaque_type_1) return false
    if (inner_opaque_type_2 != other.inner_opaque_type_2) return false
    return true
  }

  override fun hashCode(): Int {
    var result = super.hashCode
    if (result == 0) {
      result = unknownFields.hashCode()
      result = result * 37 + (inner_opaque_type_1?.hashCode() ?: 0)
      result = result * 37 + (inner_opaque_type_2?.hashCode() ?: 0)
      super.hashCode = result
    }
    return result
  }

  override fun toString(): String {
    val result = mutableListOf<String>()
    if (inner_opaque_type_1 != null) result += """inner_opaque_type_1=$inner_opaque_type_1"""
    if (inner_opaque_type_2 != null) result += """inner_opaque_type_2=$inner_opaque_type_2"""
    return result.joinToString(prefix = "OuterOpaqueType{", separator = ", ", postfix = "}")
  }

  public fun copy(
    inner_opaque_type_1: ByteString? = this.inner_opaque_type_1,
    inner_opaque_type_2: InnerOpaqueType2? = this.inner_opaque_type_2,
    unknownFields: ByteString = this.unknownFields,
  ): OuterOpaqueType = OuterOpaqueType(inner_opaque_type_1, inner_opaque_type_2, unknownFields)

  public companion object {
    @JvmField
    public val ADAPTER: ProtoAdapter<OuterOpaqueType> = object : ProtoAdapter<OuterOpaqueType>(
      FieldEncoding.LENGTH_DELIMITED, 
      OuterOpaqueType::class, 
      "type.googleapis.com/squareup.protos.opaque_types.OuterOpaqueType", 
      PROTO_2, 
      null, 
      "opaque_types.proto"
    ) {
      override fun encodedSize(`value`: OuterOpaqueType): Int {
        var size = value.unknownFields.size
        size += ProtoAdapter.BYTES.encodedSizeWithTag(1, value.inner_opaque_type_1)
        size += InnerOpaqueType2.ADAPTER.encodedSizeWithTag(2, value.inner_opaque_type_2)
        return size
      }

      override fun encode(writer: ProtoWriter, `value`: OuterOpaqueType) {
        ProtoAdapter.BYTES.encodeWithTag(writer, 1, value.inner_opaque_type_1)
        InnerOpaqueType2.ADAPTER.encodeWithTag(writer, 2, value.inner_opaque_type_2)
        writer.writeBytes(value.unknownFields)
      }

      override fun encode(writer: ReverseProtoWriter, `value`: OuterOpaqueType) {
        writer.writeBytes(value.unknownFields)
        InnerOpaqueType2.ADAPTER.encodeWithTag(writer, 2, value.inner_opaque_type_2)
        ProtoAdapter.BYTES.encodeWithTag(writer, 1, value.inner_opaque_type_1)
      }

      override fun decode(reader: ProtoReader): OuterOpaqueType {
        var inner_opaque_type_1: ByteString? = null
        var inner_opaque_type_2: InnerOpaqueType2? = null
        val unknownFields = reader.forEachTag { tag ->
          when (tag) {
            1 -> inner_opaque_type_1 = ProtoAdapter.BYTES.decode(reader)
            2 -> inner_opaque_type_2 = InnerOpaqueType2.ADAPTER.decode(reader)
            else -> reader.readUnknownField(tag)
          }
        }
        return OuterOpaqueType(
          inner_opaque_type_1 = inner_opaque_type_1,
          inner_opaque_type_2 = inner_opaque_type_2,
          unknownFields = unknownFields
        )
      }

      override fun redact(`value`: OuterOpaqueType): OuterOpaqueType = value.copy(
        inner_opaque_type_2 = value.inner_opaque_type_2?.let(InnerOpaqueType2.ADAPTER::redact),
        unknownFields = ByteString.EMPTY
      )
    }

    private const val serialVersionUID: Long = 0L
  }

  public class InnerOpaqueType1(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      declaredName = "value",
      schemaIndex = 0,
    )
    public val value_: String? = null,
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<InnerOpaqueType1, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN,
    )
    override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is InnerOpaqueType1) return false
      if (unknownFields != other.unknownFields) return false
      if (value_ != other.value_) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + (value_?.hashCode() ?: 0)
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (value_ != null) result += """value_=${sanitize(value_)}"""
      return result.joinToString(prefix = "InnerOpaqueType1{", separator = ", ", postfix = "}")
    }

    public fun copy(value_: String? = this.value_, unknownFields: ByteString = this.unknownFields): InnerOpaqueType1 = InnerOpaqueType1(value_, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<InnerOpaqueType1> = object : ProtoAdapter<InnerOpaqueType1>(
        FieldEncoding.LENGTH_DELIMITED, 
        InnerOpaqueType1::class, 
        "type.googleapis.com/squareup.protos.opaque_types.OuterOpaqueType.InnerOpaqueType1", 
        PROTO_2, 
        null, 
        "opaque_types.proto"
      ) {
        override fun encodedSize(`value`: InnerOpaqueType1): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.value_)
          return size
        }

        override fun encode(writer: ProtoWriter, `value`: InnerOpaqueType1) {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.value_)
          writer.writeBytes(value.unknownFields)
        }

        override fun encode(writer: ReverseProtoWriter, `value`: InnerOpaqueType1) {
          writer.writeBytes(value.unknownFields)
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.value_)
        }

        override fun decode(reader: ProtoReader): InnerOpaqueType1 {
          var value_: String? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> value_ = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return InnerOpaqueType1(
            value_ = value_,
            unknownFields = unknownFields
          )
        }

        override fun redact(`value`: InnerOpaqueType1): InnerOpaqueType1 = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }

  public class InnerOpaqueType2(
    @field:WireField(
      tag = 1,
      adapter = "com.squareup.wire.ProtoAdapter#STRING",
      declaredName = "value",
      schemaIndex = 0,
    )
    public val value_: String? = null,
    unknownFields: ByteString = ByteString.EMPTY,
  ) : Message<InnerOpaqueType2, Nothing>(ADAPTER, unknownFields) {
    @Deprecated(
      message = "Shouldn't be used in Kotlin",
      level = DeprecationLevel.HIDDEN,
    )
    override fun newBuilder(): Nothing = throw AssertionError("Builders are deprecated and only available in a javaInterop build; see https://square.github.io/wire/wire_compiler/#kotlin")

    override fun equals(other: Any?): Boolean {
      if (other === this) return true
      if (other !is InnerOpaqueType2) return false
      if (unknownFields != other.unknownFields) return false
      if (value_ != other.value_) return false
      return true
    }

    override fun hashCode(): Int {
      var result = super.hashCode
      if (result == 0) {
        result = unknownFields.hashCode()
        result = result * 37 + (value_?.hashCode() ?: 0)
        super.hashCode = result
      }
      return result
    }

    override fun toString(): String {
      val result = mutableListOf<String>()
      if (value_ != null) result += """value_=${sanitize(value_)}"""
      return result.joinToString(prefix = "InnerOpaqueType2{", separator = ", ", postfix = "}")
    }

    public fun copy(value_: String? = this.value_, unknownFields: ByteString = this.unknownFields): InnerOpaqueType2 = InnerOpaqueType2(value_, unknownFields)

    public companion object {
      @JvmField
      public val ADAPTER: ProtoAdapter<InnerOpaqueType2> = object : ProtoAdapter<InnerOpaqueType2>(
        FieldEncoding.LENGTH_DELIMITED, 
        InnerOpaqueType2::class, 
        "type.googleapis.com/squareup.protos.opaque_types.OuterOpaqueType.InnerOpaqueType2", 
        PROTO_2, 
        null, 
        "opaque_types.proto"
      ) {
        override fun encodedSize(`value`: InnerOpaqueType2): Int {
          var size = value.unknownFields.size
          size += ProtoAdapter.STRING.encodedSizeWithTag(1, value.value_)
          return size
        }

        override fun encode(writer: ProtoWriter, `value`: InnerOpaqueType2) {
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.value_)
          writer.writeBytes(value.unknownFields)
        }

        override fun encode(writer: ReverseProtoWriter, `value`: InnerOpaqueType2) {
          writer.writeBytes(value.unknownFields)
          ProtoAdapter.STRING.encodeWithTag(writer, 1, value.value_)
        }

        override fun decode(reader: ProtoReader): InnerOpaqueType2 {
          var value_: String? = null
          val unknownFields = reader.forEachTag { tag ->
            when (tag) {
              1 -> value_ = ProtoAdapter.STRING.decode(reader)
              else -> reader.readUnknownField(tag)
            }
          }
          return InnerOpaqueType2(
            value_ = value_,
            unknownFields = unknownFields
          )
        }

        override fun redact(`value`: InnerOpaqueType2): InnerOpaqueType2 = value.copy(
          unknownFields = ByteString.EMPTY
        )
      }

      private const val serialVersionUID: Long = 0L
    }
  }
}
