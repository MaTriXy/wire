// Code generated by Wire protocol buffer compiler, do not edit.
// Source: squareup.protos.opaque_types.OuterOpaqueType in opaque_types.proto
import Foundation
import Wire

public struct OuterOpaqueType {

    @ProtoDefaulted
    public var inner_opaque_type_1: Foundation.Data?
    @ProtoDefaulted
    public var inner_opaque_type_2: OuterOpaqueType.InnerOpaqueType2?
    public var unknownFields: UnknownFields = .init()

    public init(configure: (inout Self) -> Swift.Void = { _ in }) {
        configure(&self)
    }

}

#if !WIRE_REMOVE_EQUATABLE
extension OuterOpaqueType : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension OuterOpaqueType : Hashable {
}
#endif

extension OuterOpaqueType : Sendable {
}

extension OuterOpaqueType : ProtoDefaultedValue {

    public static var defaultedValue: Self {
        .init()
    }
}

extension OuterOpaqueType : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.opaque_types.OuterOpaqueType"
    }

}

extension OuterOpaqueType : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var inner_opaque_type_1: Foundation.Data? = nil
        var inner_opaque_type_2: OuterOpaqueType.InnerOpaqueType2? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: inner_opaque_type_1 = try protoReader.decode(Foundation.Data.self)
            case 2: inner_opaque_type_2 = try protoReader.decode(OuterOpaqueType.InnerOpaqueType2.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._inner_opaque_type_1.wrappedValue = inner_opaque_type_1
        self._inner_opaque_type_2.wrappedValue = inner_opaque_type_2
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.inner_opaque_type_1)
        try protoWriter.encode(tag: 2, value: self.inner_opaque_type_2)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension OuterOpaqueType : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._inner_opaque_type_1.wrappedValue = try container.decodeIfPresent(stringEncoded: Foundation.Data.self, firstOfKeys: "innerOpaqueType1", "inner_opaque_type_1")
        self._inner_opaque_type_2.wrappedValue = try container.decodeIfPresent(OuterOpaqueType.InnerOpaqueType2.self, firstOfKeys: "innerOpaqueType2", "inner_opaque_type_2")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)
        let preferCamelCase = encoder.protoKeyNameEncodingStrategy == .camelCase

        try container.encodeIfPresent(stringEncoded: self.inner_opaque_type_1, forKey: preferCamelCase ? "innerOpaqueType1" : "inner_opaque_type_1")
        try container.encodeIfPresent(self.inner_opaque_type_2, forKey: preferCamelCase ? "innerOpaqueType2" : "inner_opaque_type_2")
    }

}
#endif

/**
 * Subtypes within OuterOpaqueType
 */
extension OuterOpaqueType {

    public struct InnerOpaqueType1 {

        @ProtoDefaulted
        public var value: String?
        public var unknownFields: UnknownFields = .init()

        public init(configure: (inout Self) -> Swift.Void = { _ in }) {
            configure(&self)
        }

    }

    public struct InnerOpaqueType2 {

        @ProtoDefaulted
        public var value: String?
        public var unknownFields: UnknownFields = .init()

        public init(configure: (inout Self) -> Swift.Void = { _ in }) {
            configure(&self)
        }

    }

}

#if !WIRE_REMOVE_EQUATABLE
extension OuterOpaqueType.InnerOpaqueType1 : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension OuterOpaqueType.InnerOpaqueType1 : Hashable {
}
#endif

extension OuterOpaqueType.InnerOpaqueType1 : Sendable {
}

extension OuterOpaqueType.InnerOpaqueType1 : ProtoDefaultedValue {

    public static var defaultedValue: Self {
        .init()
    }
}

extension OuterOpaqueType.InnerOpaqueType1 : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.opaque_types.OuterOpaqueType.InnerOpaqueType1"
    }

}

extension OuterOpaqueType.InnerOpaqueType1 : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var value: String? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: value = try protoReader.decode(String.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._value.wrappedValue = value
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.value)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension OuterOpaqueType.InnerOpaqueType1 : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._value.wrappedValue = try container.decodeIfPresent(String.self, forKey: "value")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        try container.encodeIfPresent(self.value, forKey: "value")
    }

}
#endif

#if !WIRE_REMOVE_EQUATABLE
extension OuterOpaqueType.InnerOpaqueType2 : Equatable {
}
#endif

#if !WIRE_REMOVE_HASHABLE
extension OuterOpaqueType.InnerOpaqueType2 : Hashable {
}
#endif

extension OuterOpaqueType.InnerOpaqueType2 : Sendable {
}

extension OuterOpaqueType.InnerOpaqueType2 : ProtoDefaultedValue {

    public static var defaultedValue: Self {
        .init()
    }
}

extension OuterOpaqueType.InnerOpaqueType2 : ProtoMessage {

    public static func protoMessageTypeURL() -> String {
        return "type.googleapis.com/squareup.protos.opaque_types.OuterOpaqueType.InnerOpaqueType2"
    }

}

extension OuterOpaqueType.InnerOpaqueType2 : Proto2Codable {

    public init(from protoReader: ProtoReader) throws {
        var value: String? = nil

        let token = try protoReader.beginMessage()
        while let tag = try protoReader.nextTag(token: token) {
            switch tag {
            case 1: value = try protoReader.decode(String.self)
            default: try protoReader.readUnknownField(tag: tag)
            }
        }
        self.unknownFields = try protoReader.endMessage(token: token)

        self._value.wrappedValue = value
    }

    public func encode(to protoWriter: ProtoWriter) throws {
        try protoWriter.encode(tag: 1, value: self.value)
        try protoWriter.writeUnknownFields(unknownFields)
    }

}

#if !WIRE_REMOVE_CODABLE
extension OuterOpaqueType.InnerOpaqueType2 : Codable {

    public init(from decoder: Decoder) throws {
        let container = try decoder.container(keyedBy: StringLiteralCodingKeys.self)
        self._value.wrappedValue = try container.decodeIfPresent(String.self, forKey: "value")
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: StringLiteralCodingKeys.self)

        try container.encodeIfPresent(self.value, forKey: "value")
    }

}
#endif
